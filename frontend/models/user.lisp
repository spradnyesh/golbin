(in-package :hawksbill.golbin.frontend)

(defclass user ()
  ((id :initarg :id :initform nil :accessor id)
   (username :initarg :username :initform nil :accessor username)
   (handle :initarg :handle :initform nil :accessor handle) ; name that the user wants others to see
   (password :initarg :password :initform nil :accessor password)
   (name :initarg :name :initform nil :accessor name)
   (gender :initarg :gender :initform nil :accessor gender)
   (age :initarg :age :initform nil :accessor age)
   (email :initarg :email :initform nil :accessor email)))
(defclass author (user)
  ((address-1 :initarg :address1 :initform nil :accessor address-1)
   (address-2 :initarg :address2 :initform nil :accessor address-2)
   (address-3 :initarg :address3 :initform nil :accessor address-3)
   (city :initarg :city :initform nil :accessor city)
   (state :initarg :state :initform nil :accessor state)
   (country :initarg :country :initform nil :accessor country)
   (zipcode :initarg :zipcode :initform nil :accessor zipcode)
   (location :initarg :location :initform nil :accessor location)
   (contact-1 :initarg :contact1 :initform nil :accessor contact-1)
   (contact-2 :initarg :contact2 :initform nil :accessor contact-2)
   (contact-3 :initarg :contact3 :initform nil :accessor contact-3)
   (bank-name :initarg :bank-name :initform nil :accessor bank-name)
   (bank-account-no :initarg :account :initform nil :accessor bank-account-no)
   (bank-ifsc :initarg :ifsc :initform nil :accessor bank-ifsc)
   (author-type :initarg :author-type :initform nil :accessor author-type)
   (education :initarg :education :initform nil :accessor education)))
(defclass visitor (user)
  ((preference :initarg :preference :initform nil :accessor preference)))

(defclass author-storage ()
  ((authors :initform nil :accessor authors)
   (last-id :initform 0 :accessor last-id))
  (:documentation "Object of this class will act as the storage for Authors"))

(defun add-author (author &optional (storage *author-storage*))
  (push author (authors storage))
  author)

(defun get-all-authors (&optional (storage *author-storage*))
  (sort (authors storage)
        #'string<
        :key 'name))
